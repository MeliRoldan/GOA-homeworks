* {
    margin: 0; /*აშორებს მთლიან გვერდს მზედმეტ მარჯინებს რაც აქვს დეფოულტად ბრაუზერს*/
    padding: 0; /*აშორებს მთლიან გვერდს მზედმეტ პადინგს რაც აქვს დეფოულტად ბრაუზერს*/
    box-sizing: border-box; /*ყოველთვის ამით უნდა დავიწყოთ css-ი*/
    color: white;
}

body {
    background-color: hotpink;
}

.grid {
    width: 100%;
    height: 100vh;
    display: grid;
    grid-template-columns: 1fr minmax(100px, 2fr); 
    /* repeat(5, 1fr) ნიშნავს 5-ჯერ გაიმეორო 1fr ზომის სვეტი*/
    /* minmax განსაზღვარს მინიმალურ და მაქსიმალურ ზომას რესპონსივისთვის */
    /* repeat(auto-fit, minmax (100px, 1fr)) ასე შეგვილია გადავცეთ პირობა რომ თვითონ გაანაწილოს რამდენი სვეტი იქნება რესპონსივისთვის, მაგრამ მინიმალურზე თითოს ზომა იყოს 100px და მაქსიმულზე 1fr*/
    grid-template-rows: 2fr 3fr 1fr;
    grid-template-areas: 
    'header main'
    'aside main'
    'aside footer'
    ;
    gap: 0.5em;
    padding: 30px;
}

.item {
    padding: 0px 50px;
}

header {
    grid-area: header;
    /* თუ აქ გრიდ არეას ჰეადერის ნაცვლად მივცემთ სხვა სახელს რომელიც გრიდ თემფლეით არეაში გვაქვს გადაცემული, ჰამ ჰედერის ადგილას ჩაჯდება ის სექცია, ანუ თუ აქ ჩავწერთ main-ს ამ სექციას გადმოიტანს */
    background-color: brown;
}

.section1, .section2, .header, .footer {
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.section1 {
    grid-column: 2/3;
    grid-row: 1/3;
    grid-area: main;
    background-color:blueviolet;
 }


.section2 {
   grid-row: 2/4;
   grid-area: aside;
   background-color: blue;
}

.footer {
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    grid-area: footer;
    background-color: teal;
}